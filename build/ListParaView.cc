//this file is generated by program(drogon_ctl) automatically,don't modify it!
#include "ListParaView.h"
#include <drogon/utils/OStringStream.h>
#include <string>
#include <map>
#include <vector>
#include <set>
#include <iostream>
#include <unordered_map>
#include <unordered_set>
#include <algorithm>
#include <list>
#include <deque>
#include <queue>
using namespace drogon;
std::string ListParaView::genText(const DrTemplateData& ListParaView_view_data)
{
	drogon::OStringStream ListParaView_tmp_stream;
	std::string layoutName{""};
	ListParaView_tmp_stream << "<!DOCTYPE html>\n";
	ListParaView_tmp_stream << "<html>\n";
	ListParaView_tmp_stream << "    ";
    // dataからunorder_mapとしてパラメータを取得
    auto para = ListParaView_view_data.get<std::unordered_map<std::string, std::string>>("parameters");
    
    // 適当に変数宣言してみる
    auto name = "KoukiNAGATA";
    auto date = "2021.06.15";
    
	ListParaView_tmp_stream << "    <head>\n";
	ListParaView_tmp_stream << "        <meta charset=\"UTF-8\">\n";
	ListParaView_tmp_stream << "        <title>";
{
    auto & val=ListParaView_view_data["title"];
    if(val.type()==typeid(const char *)){
        ListParaView_tmp_stream<<*any_cast<const char *>(&val);
    }else if(val.type()==typeid(std::string)||val.type()==typeid(const std::string)){
        ListParaView_tmp_stream<<*any_cast<const std::string>(&val);
    }
}
	ListParaView_tmp_stream << "</title>\n";
	ListParaView_tmp_stream << "    </head>\n";
	ListParaView_tmp_stream << "    <body>\n";
	ListParaView_tmp_stream << "    \n";
	ListParaView_tmp_stream << "    <!-- 変数展開はどちらでも良い　-->\n";
	ListParaView_tmp_stream << "    <p>Hello, ";
ListParaView_tmp_stream<<name;
	ListParaView_tmp_stream << "!</p>\n";
	ListParaView_tmp_stream << "    <p>Date: ";
 ListParaView_tmp_stream << date; 
	ListParaView_tmp_stream << "</p>\n";
	ListParaView_tmp_stream << "    \n";
	ListParaView_tmp_stream << "    ";
 if(para.size()>0){
	ListParaView_tmp_stream << "    <h1>Parameters</h1>\n";
	ListParaView_tmp_stream << "    <table border=\"1\">\n";
	ListParaView_tmp_stream << "        <tr>\n";
	ListParaView_tmp_stream << "            <th>name</th>\n";
	ListParaView_tmp_stream << "            <th>value</th>\n";
	ListParaView_tmp_stream << "        </tr>\n";
	ListParaView_tmp_stream << "        <!-- イテレーションループでパラメータを展開　-->\n";
	ListParaView_tmp_stream << "        ";
 for(auto iter:para){ 
	ListParaView_tmp_stream << "        <tr>\n";
	ListParaView_tmp_stream << "            <td>";
ListParaView_tmp_stream<<iter.first;
	ListParaView_tmp_stream << "</td> \n";
	ListParaView_tmp_stream << "            <td>";
 ListParaView_tmp_stream<<iter.second;
	ListParaView_tmp_stream << "</td>\n";
	ListParaView_tmp_stream << "        </tr>\n";
	ListParaView_tmp_stream << "        ";
 } // endfor
	ListParaView_tmp_stream << "    </table>\n";
	ListParaView_tmp_stream << "    ";
 }else{ 
	ListParaView_tmp_stream << "    <h1>no parameter</h1>\n";
	ListParaView_tmp_stream << "    ";
 } // endif 
	ListParaView_tmp_stream << "    </body>\n";
	ListParaView_tmp_stream << "</html>\n";
if(layoutName.empty())
{
std::string ret{std::move(ListParaView_tmp_stream.str())};
return ret;
}else
{
auto templ = DrTemplateBase::newTemplate(layoutName);
if(!templ) return "";
HttpViewData data = ListParaView_view_data;
auto str = std::move(ListParaView_tmp_stream.str());
if(!str.empty() && str[str.length()-1] == '\n') str.resize(str.length()-1);
data[""] = std::move(str);
return templ->genText(data);
}
}
